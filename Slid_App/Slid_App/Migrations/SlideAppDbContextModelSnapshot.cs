// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Slid_App.Models;

#nullable disable

namespace Slid_App.Migrations
{
    [DbContext(typeof(SlideAppDbContext))]
    partial class SlideAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Slid_App.Models.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageBase64")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SlidId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SlidId");

                    b.ToTable("Pages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SlidId = 1,
                            Text = "Page Content"
                        });
                });

            modelBuilder.Entity("Slid_App.Models.Slid", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int>("SlidId")
                        .HasColumnType("int");

                    b.Property<string>("SlidName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SlidUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("Slids");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            SlidId = 1,
                            SlidName = "Sample Slid",
                            SlidUrl = "/slides/1/Slid"
                        });
                });

            modelBuilder.Entity("Slid_App.Models.UFile", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("UFiles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Id = 1,
                            ImageUrl = "https://example.com/sample.jpg",
                            Name = "Sample File",
                            VideoUrl = "https://example.com/sample.mp4"
                        });
                });

            modelBuilder.Entity("Slid_App.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateOfBerth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ImageBase64")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "88cc724a-7c22-49f1-863e-dcaeb1cba976",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d91f4d74-1185-4093-bd02-b614f3b81957",
                            DateOfBerth = "1990-01-01",
                            Email = "john.doe@example.com",
                            EmailConfirmed = false,
                            ImageBase64 = "base64encodedimage",
                            LockoutEnabled = false,
                            Name = "John Doe",
                            Password = "password123",
                            PhoneNumber = "123-456-7890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4c0c469e-dd8b-4a79-ae6a-0a944b4d03db",
                            TwoFactorEnabled = false,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Slid_App.Models.Page", b =>
                {
                    b.HasOne("Slid_App.Models.Slid", "Slids")
                        .WithMany("Page")
                        .HasForeignKey("SlidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slids");
                });

            modelBuilder.Entity("Slid_App.Models.Slid", b =>
                {
                    b.HasOne("Slid_App.Models.User", "User")
                        .WithMany("Slids")
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Slid_App.Models.UFile", b =>
                {
                    b.HasOne("Slid_App.Models.User", "User")
                        .WithMany("Files")
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Slid_App.Models.Slid", b =>
                {
                    b.Navigation("Page");
                });

            modelBuilder.Entity("Slid_App.Models.User", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Slids");
                });
#pragma warning restore 612, 618
        }
    }
}
